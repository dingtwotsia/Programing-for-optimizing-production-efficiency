{\rtf1\ansi\ansicpg950\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset136 PingFangTC-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18640\viewh11800\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
#include <iostream>\
#include <cstring>\
using namespace std;\
void ordersort(int, int**);\
void swapRows(int[], int[]);\
void machine_order(int, int, int, int[], int**, int**, int**);\
int machine_time(int, int, int[]);\
void output(int, int*, int**);\
int main()\
\{\
    //m = 
\f1 \'be\'f7\'be\'b9\'bc\'c6\'b6\'71
\f0 ,n = 
\f1 \'ad\'71\'b3\'e6\'bc\'c6\'b6\'71
\f0 ,h = 
\f1 \'ba\'fb\'ad\'d7\'ad\'ad\'a8\'ee
\f0 \
    int m = 0, n = 0, h = 0;\
    cin >> m >> n >> h;\
    //
\f1 \'bf\'e9\'a4\'4a\'be\'f7\'be\'b9\'b8\'ea\'ae\'c6
\f0 \
    int** data = new int* [m];\
    for (int i = 0; i < m; i++)\
        data[i] = new int[5];\
    for (int i = 0; i < m; i++)\
    \{\
        for (int j = 0; j < 5; j++)\
        \{\
            int this_one = 0;\
            cin >> this_one;\
            data[i][j] = this_one;\
        \}\
    \}\
    //
\f1 \'bf\'e9\'a4\'4a\'ad\'71\'b3\'e6\'b8\'ea\'ae\'c6
\f0 \
    int** orderInfo = new int* [n];\
    for (int i = 0; i < n; i++)\
        orderInfo[i] = new int[3];\
    for (int i = 0; i < n; i++)\
    \{\
        orderInfo[i][0] = i+1;\
        for (int j = 1; j < 3; j++)\
            cin >> orderInfo[i][j];\
    \}\
    //
\f1 \'ad\'d7\'a7\'ef\'ad\'71\'b3\'e6\'b6\'b6\'a7\'c7
\f0 \
    ordersort(n, orderInfo);\
    //
\f1 \'ac\'f6\'bf\'fd\'be\'f7\'be\'b9\'a1\'c4\'ad\'71\'b3\'e6
\f0 \
    int** record = new int* [m];\
    for(int i = 0;i < m;i++)\
        record[i] = new int[n];\
    //
\f1 \'ac\'f6\'bf\'fd\'be\'f7\'be\'b9\'ad\'74\'b3\'64\'b4\'58\'b5\'a7\'ad\'71\'b3\'e6
\f0 \
    int* ans_period = new int[m];\
    for(int i = 0;i < m;i++)\
        ans_period[i] = 0;\
    //
\f1 \'a6\'77\'b1\'c6\'ad\'71\'b3\'e6
\f0 \
    machine_order(n, m, h, ans_period, orderInfo, data, record);\
    //
\f1 \'bf\'e9\'a5\'58\'b5\'aa\'ae\'d7
\f0 \
    output(m, ans_period, record);\
    return 0;\
\}\
//
\f1 \'ad\'d7\'a7\'ef\'ad\'71\'b3\'e6\'b6\'b6\'a7\'c7
\f0 \
void ordersort(int n, int** order)\
\{\
    //
\f1 \'a5\'fd\'ab\'f6\'b7\'d3\'c3\'ba\'a5\'e6\'ae\'c9\'b6\'a1\'a1\'41\'a5\'d1\'ab\'65\'a9\'b9\'ab\'e1\'b1\'c6
\f0 \
    for (int i = 0; i < n; i++)\
    \{\
        for (int j = 0; j < n - 1; j++)\
        \{\
            if (order[j][2] > order[j + 1][2])\
            \{\
                swapRows(order[j], order[j + 1]);\
            \}\
        \}\
    \}\
    //
\f1 \'ad\'59\'ac\'db\'a6\'50\'c3\'ba\'a5\'e6\'ae\'c9\'b6\'a1\'a1\'41\'a5\'fd\'a7\'e2\'a4\'6a\'ad\'71\'b3\'e6\'a7\'b9\'a6\'a8
\f0 \
    int d = 0;\
    int next = 0;\
    int leftToSort = n;\
    while (leftToSort > 0)\
    \{\
        int dAmount = 0;\
        d = order[next][2];\
        for (int i = 0; i < n; i++)\
        \{\
            if (order[i][2] == d)\
            \{\
                dAmount++;\
            \}\
        \}\
        int round = 0;\
        for (int i = next; i < next + dAmount; i++)\
        \{\
            for (int j = next; j < next + dAmount - 1; j++)\
            \{\
                if (order[j][1] > order[j + 1][1])\
                    swapRows(order[j], order[j + 1]);\
            \}\
            round++;\
        \}\
        next += dAmount;\
        leftToSort -= dAmount;\
    \}\
\}\
//
\f1 \'a8\'e2\'b5\'a7\'ad\'71\'b3\'e6\'a4\'ac\'b4\'ab
\f0 \
void swapRows(int a[3], int b[3])\
\{\
    int num = 0, q = 0, d = 0;\
    num = a[0]; q = a[1]; d = a[2];\
    a[0] = b[0]; a[1] = b[1]; a[2] = b[2];\
    b[0] = num; b[1] = q; b[2] = d;\
\}\
\
//
\f1 \'b1\'4e\'ad\'71\'b3\'e6\'a6\'77\'b1\'c6\'b6\'69\'be\'f7\'be\'b9
\f0 \
void machine_order(int n, int m, int h, int ans_period[], int** orderinfo, int** data, int** record)\
\{\
    //
\f1 \'a5\'d8\'ab\'65\'b8\'d3\'be\'f7\'be\'b9\'aa\'ba\'ae\'c9\'b6\'a1
\f0 \
    int* begin_period = new int[m];\
    //
\f1 \'ad\'d7\'b2\'7a\'a6\'b8\'bc\'c6\'a6\'43\'aa\'ed
\f0 \
    int* machine_fix = new int[1000];\
    for (int i = 0; i < 1000; i++)\
        machine_fix[i] = 0;\
    //
\f1 \'b3\'5d\'a9\'77\'a8\'ec\'aa\'ba\'ae\'c9\'a8\'b0
\f0 \
    for (int i = 0; i < m; i++)\
        begin_period[i] = 0;\
    //
\f1 \'b3\'5d\'a9\'77\'b2\'a3\'af\'e0\'aa\'ac\'aa\'70
\f0 \
    int* begin_power = new int[m];\
    for (int i = 0; i < m; i++)\
        begin_power[i] = data[i][3];//
\f1 \'a4\'40\'b6\'7d\'a9\'6c\'b3\'a3\'ac\'4f\'ad\'ec\'a5\'bb\'aa\'ba
\f0 \
    //
\f1 \'b9\'ef\'a9\'d2\'a6\'b3\'ad\'71\'b3\'e6\'a1\'5d\'a4\'77\'b1\'c6\'a6\'43\'a1\'5e
\f0 \
    for (int i = 0; i < n; i++)\
    \{\
        //
\f1 \'bf\'ef\'be\'dc\'ad\'6e\'ad\'fe\'a4\'40\'a5\'78\'be\'f7\'be\'b9
\f0 \
        bool fix_or_not = false;//
\f1 \'a5\'fd\'b0\'b2\'b3\'5d\'a4\'a3\'ad\'d7\'b2\'7a
\f0 \
        int min_hour = 1000000;\
        int this_ans = -1;\
        //
\f1 \'b9\'ef\'a9\'d2\'a6\'b3\'be\'f7\'be\'b9
\f0 \
        for (int j = 0; j < m; j++)\
        \{\
            bool this_fix_or_not = false;//
\f1 \'a5\'fd\'b0\'b2\'b3\'5d\'a4\'a3\'ad\'d7\'b2\'7a
\f0 \
            int this_time_nofix = 0;\
            //
\f1 \'a6\'70\'aa\'47\'a4\'a3\'ad\'d7\'b2\'7a\'a1\'d7\'a5\'d8\'ab\'65\'ae\'c9\'b6\'a1\'a1\'cf\'bb\'73\'b3\'79\'ae\'c9\'b6\'a1
\f0 \
            this_time_nofix = begin_period[j] + machine_time(orderinfo[i][1], begin_power[j], data[j]);\
            int this_time_fix = 0;\
            //
\f1 \'a6\'70\'aa\'47\'ad\'d7\'b2\'7a\'a1\'d7\'a5\'d8\'ab\'65\'ae\'c9\'b6\'a1\'a1\'cf\'bb\'73\'b3\'79\'ae\'c9\'b6\'a1\'a1\'cf\'ad\'d7\'b2\'7a\'ae\'c9\'b6\'a1
\f0 \
            this_time_fix = begin_period[j] + machine_time(orderinfo[i][1], 100 + data[j][1], data[j]) + data[j][2];\
            //
\f1 \'a7\'50\'a7\'4f\'ad\'d7\'b2\'7a\'ae\'c9\'b6\'a1\'a4\'a4\'a1\'41\'a6\'b3\'a8\'53\'a6\'b3\'ad\'fe\'ad\'d3\'ae\'c9\'ac\'71\'b7\'7c\'b6\'57\'b9\'4c\'ad\'ad\'a8\'ee\'a1\'5d
\f0 h
\f1 \'a1\'5e
\f0 \
            for (int k = begin_period[j]; k < begin_period[j] + data[j][2]; k++)\
            \{\
                if (machine_fix[k] >= h)\
                \{\
                    this_time_fix = 100000;\
                    break;\
                \}\
            \}\
            //
\f1 \'a6\'70\'aa\'47\'ad\'d7\'b2\'7a\'a4\'f1\'b8\'fb\'a6\'6e\'a1\'d7\'a4\'a3\'ad\'d7\'b2\'7a\'ae\'c9\'b6\'a1\'aa\'e1\'a4\'f1\'b8\'fb\'aa\'f8
\f0 \
            if (this_time_nofix > this_time_fix )\
            \{\
                this_time_nofix = this_time_fix;\
                this_fix_or_not = true;\
            \}\
\
            if (this_time_nofix < min_hour)\
            \{\
                min_hour = this_time_nofix;\
                fix_or_not = this_fix_or_not;\
                this_ans = j;\
            \}\
        \}\
        //
\f1 \'b3\'42\'b2\'7a\'b2\'a3\'af\'e0
\f0 \
        //
\f1 \'a6\'70\'aa\'47\'ad\'6e\'ad\'d7\'b2\'7a
\f0 \
        if(fix_or_not == true)\
        \{\
            //
\f1 \'a5\'5b\'ba\'a1\'a8\'ec
\f0 100\
            begin_power[this_ans] = 100 + data[this_ans][1];\
            //
\f1 \'a6\'a9\'b1\'bc\'a4\'55\'ad\'b0\'aa\'ba\'b2\'a3\'af\'e0
\f0 \
            begin_power[this_ans] -= (min_hour - begin_period[this_ans] - data[this_ans][2]) * data[this_ans][1];\
            //
\f1 \'a7\'e2\'ad\'d7\'b2\'7a\'ae\'c9\'b6\'a1\'a6\'43\'aa\'ed\'b6\'f1\'a4\'57\'a5\'bb\'a6\'b8\'ad\'6e\'ad\'d7\'b2\'7a\'aa\'ba\'ae\'c9\'b6\'a1
\f0 \
            for(int j = begin_period[this_ans];j < begin_period[this_ans] + data[this_ans][2];j++)\
                machine_fix[j] += 1;\
        \}\
        //
\f1 \'a4\'a3\'ad\'d7\'b2\'7a\'aa\'ba\'b8\'dc\'a1\'41\'aa\'bd\'b1\'b5\'a6\'a9\'b1\'bc\'a4\'55\'ad\'b0\'b2\'a3\'af\'e0
\f0 \
        else\
            begin_power[this_ans] -= (min_hour - begin_period[this_ans]) * data[this_ans][1];\
        //
\f1 \'a6\'70\'aa\'47\'a7\'43\'a9\'f3\'ad\'ad\'a8\'ee\'a1\'41\'ab\'ec\'b4\'5f\'a8\'ec\'b7\'a5\'a4\'70\'ad\'c8
\f0 \
        if(begin_power[this_ans] < data[this_ans][4])\
            begin_power[this_ans] = data[this_ans][4];\
        \
        //
\f1 \'ad\'6e\'ad\'d7\'b2\'7a\'aa\'ba\'b8\'dc\'a1\'41\'b6\'f1\'a4\'57
\f0 \'93-1\'94\
        if (fix_or_not == true)\
        \{\
            record[this_ans][ans_period[this_ans]] = -1;\
            record[this_ans][ans_period[this_ans] + 1] = orderinfo[i][0];\
            //
\f1 \'ad\'6e\'a5\'5b
\f0 2
\f1 \'a1\'d7\'ad\'d7\'b2\'7a\'a1\'cf\'ad\'71\'b3\'e6\'a6\'57\'ba\'d9
\f0 \
            ans_period[this_ans] += 2;\
        \}\
        else\
        \{\
            record[this_ans][ans_period[this_ans]] = orderinfo[i][0];\
            ans_period[this_ans] += 1;\
        \}\
        begin_period[this_ans] = min_hour;\
    \}\
\
\}\
//
\f1 \'ad\'70\'ba\'e2\'a9\'d2\'bb\'dd\'ae\'c9\'b6\'a1
\f0 \
int machine_time(int qui, int power, int data[])\
\{\
    int time = 0;\
    //
\f1 \'ad\'bc\'a4\'57
\f0 100\
    qui = qui * 100;\
    while (qui > 0)\
    \{\
        time += 1;\
        power -= data[1];\
        if (power < data[4])\
            power = data[4];\
        qui -= data[0] * power;\
    \}\
    return time;\
\}\
//
\f1 \'bf\'e9\'a5\'58
\f0 \
void output(int m, int* end_time, int** record)\
\{\
    for (int i = 0; i < m; i++)\
    \{\
        for (int j = 0; j < end_time[i]; j++)\
        \{\
            //
\f1 \'a6\'70\'aa\'47\'ac\'4f
\f0 -1
\f1 \'a1\'41\'b4\'4e\'ac\'4f\'ad\'6e\'ad\'d7\'b2\'7a\'a1\'41\'bf\'e9\'a5\'58\'a2\'db
\f0 \
            if(record[i][j] == -1)\
                cout << "M,";\
            //
\f1 \'a6\'70\'aa\'47\'ac\'4f\'b3\'cc\'ab\'e1\'a4\'40\'ad\'d3\'a1\'41\'a4\'a3\'ad\'6e\'a6\'b3
\f0 \'93,\'94\
            else if ((record[i][j] != 1)and(j == end_time[i] -1))\
                cout << record[i][j];\
            else\
                cout << record[i][j]<<",";\
        \}\
        //
\f1 \'a8\'53\'a6\'b3\'a6\'77\'b1\'c6\'ad\'71\'b3\'e6\'a1\'41\'bf\'e9\'a5\'58
\f0 "
\f1 \'a2\'af
\f0 "\
        if(end_time[i] == 0)\
            cout<<0;\
        cout<<"\\n";\
    \}\
\}}